import streamlit as st
from snowflake.snowpark import Session
from datetime import datetime

# ---- CONFIG ----
COMPANY_NAME = "–ê–ü–£ –•–•–ö"
SCHEMA_NAME = "APU"
EMPLOYEE_TABLE = "APU_EMP_DATA"
ANSWER_TABLE = f"{SCHEMA_NAME}_SURVEY_ANSWERS"
DATABASE_NAME = "CDNA_HR_DATA"
LOGO_URL = "https://i.imgur.com/DgCfZ9B.png"

# ---- Secure session ----
def get_session():
    return Session.builder.configs(st.secrets["connections.snowflake"]).create()

# ---- Survey type dictionary ----
survey_types = {
    "–ö–æ–º–ø–∞–Ω–∏–π–Ω —Å–∞–Ω–∞–∞—á–∏–ª–≥–∞–∞—Ä": ["1 –∂–∏–ª —Ö“Ø—Ä—Ç—ç–ª", "1-—ç—ç—Å –¥—ç—ç—à"],
    "–ê–∂–∏–ª—Ç–Ω—ã —Å–∞–Ω–∞–∞—á–ª–∞–≥–∞–∞—Ä": [
        "6 —Å–∞—Ä –¥–æ—Ç–æ—Ä –≥–∞—Ä—á –±–∞–π–≥–∞–∞", "7 —Å–∞—Ä–∞–∞—Å 3 –∂–∏–ª ",
        "4-10 –∂–∏–ª", "11 –±–æ–ª–æ–Ω —Ç“Ø“Ø–Ω—ç—ç—Å –¥—ç—ç—à"
    ],
}

# ---- STATE INIT ----
for k, v in [
    ("category_selected", None),
    ("survey_type", None),
    ("page", -1),
    ("emp_confirmed", None),
    ("answers", {}),
    ("logged_in", False)
]:
    if k not in st.session_state:
        st.session_state[k] = v

# ---- Page Config ----
st.set_page_config(page_title=f"{COMPANY_NAME} –°—É–¥–∞–ª–≥–∞–∞", layout="wide")

# ---- Utils ----
def logo():
    st.image(LOGO_URL, width=210)

def progress_chart():
    total_by_type = {
        "1 –∂–∏–ª —Ö“Ø—Ä—Ç—ç–ª": 17, "1-—ç—ç—Å –¥—ç—ç—à": 16,
        "6 —Å–∞—Ä –¥–æ—Ç–æ—Ä –≥–∞—Ä—á –±–∞–π–≥–∞–∞": 20, "7 —Å–∞—Ä–∞–∞—Å 3 –∂–∏–ª ": 19,
        "4-10 –∂–∏–ª": 19, "11 –±–æ–ª–æ–Ω —Ç“Ø“Ø–Ω—ç—ç—Å –¥—ç—ç—à": 19
    }
    if st.session_state.page < 3: return
    idx = st.session_state.page - 2
    total = total_by_type.get(st.session_state.survey_type, 19)
    st.markdown(f"#### –ê—Å—É—É–ª—Ç {idx} / {total}")
    st.progress(min(100, int((idx / total) * 100)))

# ---- Login Page ----
def login_page():
    logo()
    st.title("üë®‚Äçüíº –ù—ç–≤—Ç—Ä—ç—Ö üë©‚Äçüíº")
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    if st.button("Login"):
        if username == "hr" and password == "demo123":
            st.session_state.logged_in = True
            st.session_state.page = 0
            st.rerun()
        else:
            st.error("‚ùå Invalid credentials.")

# ---- Page 0: Choose category + survey ----
def page_0():
    logo()
    st.header("–ï—Ä”©–Ω—Ö–∏–π –º—ç–¥—ç—ç–ª—ç–ª")
    st.markdown("**–°—É–¥–∞–ª–≥–∞–∞–Ω—ã –∞–Ω–≥–∏–ª–∞–ª –±–æ–ª–æ–Ω —Ç”©—Ä–ª”©”© —Å–æ–Ω–≥–æ–Ω–æ —É—É.**")
    category = st.selectbox("–°—É–¥–∞–ª–≥–∞–∞–Ω—ã –∞–Ω–≥–∏–ª–∞–ª:",
        ["-- –°–æ–Ω–≥–æ—Ö --"] + list(survey_types.keys()), index=0)
    if category != "-- –°–æ–Ω–≥–æ—Ö --":
        st.session_state.category_selected = category
        for i, s_type in enumerate(survey_types[category]):
            if st.button(s_type, key=f"stype_{i}"):
                st.session_state.survey_type = s_type
                st.session_state.page = 1
                st.rerun()

# ---- Page 1: Confirm employee ----
def page_1():
    logo()
    st.title("–ê–∂–∏–ª—Ç–Ω—ã –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç")
    empcode = st.text_input("–ê–∂–∏–ª—Ç–Ω—ã –∫–æ–¥", key="empcode")
    firstname = st.text_input("–ù—ç—Ä", key="firstname")

    if st.button("–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö"):
        try:
            session = get_session()
            df = session.table(f"{DATABASE_NAME}.{SCHEMA_NAME}.{EMPLOYEE_TABLE}")
            match = df.filter(
                (df.empcode == empcode) & (df.firstname == firstname)
            ).collect()
            if match:
                emp = match[0]
                st.session_state.emp_confirmed = True
                st.session_state.confirmed_empcode = empcode
                st.session_state.confirmed_firstname = firstname
                st.session_state.emp_info = {
                    "–ö–æ–º–ø–∞–Ω–∏": emp["COMPANYNAME"],
                    "–ê–ª–±–∞ —Ö—ç–ª—Ç—ç—Å": emp["HEADDEPNAME"],
                    "–ê–ª–±–∞–Ω —Ç—É—à–∞–∞–ª": emp["POSNAME"],
                    "–û–≤–æ–≥": emp["LASTNAME"],
                    "–ù—ç—Ä": emp["FIRSTNAME"],
                }
            else:
                st.session_state.emp_confirmed = False
        except Exception as e:
            st.error(f"‚ùå Snowflake —Ö–æ–ª–±–æ–ª—Ç—ã–Ω –∞–ª–¥–∞–∞: {e}")

    if st.session_state.emp_confirmed is True:
        st.success("‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞!")
        emp = st.session_state.emp_info
        st.markdown(f"""
        **–ö–æ–º–ø–∞–Ω–∏:** {emp['–ö–æ–º–ø–∞–Ω–∏']}  
        **–ê–ª–±–∞ —Ö—ç–ª—Ç—ç—Å:** {emp['–ê–ª–±–∞ —Ö—ç–ª—Ç—ç—Å']}  
        **–ê–ª–±–∞–Ω —Ç—É—à–∞–∞–ª:** {emp['–ê–ª–±–∞–Ω —Ç—É—à–∞–∞–ª']}  
        **–û–≤–æ–≥:** {emp['–û–≤–æ–≥']}  
        **–ù—ç—Ä:** {emp['–ù—ç—Ä']}  
        """)
        if st.button("“Æ—Ä–≥—ç–ª–∂–ª“Ø“Ø–ª—ç—Ö"):
            st.session_state.page = 2
            st.rerun()

    elif st.session_state.emp_confirmed is False:
        st.error("‚ùå –ê–∂–∏–ª—Ç–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª –±—É—Ä—É—É –±–∞–π–Ω–∞. –ö–æ–¥ –±–æ–ª–æ–Ω –Ω—ç—Ä–∏–π–≥ —à–∞–ª–≥–∞–Ω–∞ —É—É.")

# ---- Page 2: Universal intro ----
def page_2():
    logo()
    st.title(st.session_state.survey_type)
    st.markdown("""
    –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!  
    –¢–∞–Ω—ã ”©–≥—á –±—É–π “Ø–Ω—ç–ª–≥—ç—ç, —Å–∞–Ω–∞–ª —Ö“Ø—Å—ç–ª—Ç –Ω—å –±–∏–¥–Ω–∏–π —Ü–∞–∞—à–¥—ã–Ω —Ö”©–≥–∂–ª–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö–æ–¥ —á—É—Ö–∞–ª “Ø“Ø—Ä—ç–≥—Ç—ç–π —Ç—É–ª –¥–∞—Ä–∞–∞—Ö –∞—Å—É—É–ª—Ç–∞–¥ “Ø–Ω—ç–Ω –∑”©–≤, —á–∏–Ω —Å—ç—Ç–≥—ç–ª—ç—ç—Å—ç—ç —Ö–∞—Ä–∏—É–ª–Ω–∞ —É—É.
    """)
    if st.button("–ê—Å—É—É–ª–≥–∞ —ç—Ö–ª—ç—Ö"):
        st.session_state.page = 3
        st.rerun()

# ---- Page 3+: Render Survey ----
def render_survey():
    from questions import survey_q_blocks  # ‚úÖ Your original blocks
    survey_type = st.session_state.survey_type
    blocks = survey_q_blocks.get(survey_type, [])
    if not blocks:
        st.error("‚ùå No questions found for this survey type.")
        return

    logo()
    progress_chart()

    current_page = st.session_state.page - 3
    if current_page < len(blocks):
        blocks[current_page]()
    else:
        st.success("üéâ –°—É–¥–∞–ª–≥–∞–∞ –¥—É—É—Å–ª–∞–∞!")
        if st.button("Submit", key="submit_btn"):
            submit_answers()

# ---- Submit answers ----
def submit_answers():
    try:
        session = get_session()
        a = st.session_state.answers
        emp_code = st.session_state.get("confirmed_empcode")
        first_name = st.session_state.get("confirmed_firstname")
        survey_type = st.session_state.get("survey_type")
        submitted_at = datetime.utcnow()

        columns = [
            "EMPCODE", "FIRSTNAME", "SURVEY_TYPE", "SUBMITTED_AT",
            "Reason_for_Leaving", "Alignment_with_Daily_Tasks", "Unexpected_Responsibilities",
            "Onboarding_Effectiveness", "Company_Culture", "Atmosphere", "Conflict_Resolution",
            "Feedback", "Leadership_Style", "Team_Collaboration", "Team_Support", "Motivation",
            "Motivation_Other", "Engagement", "Engagement_Other", "Well_being",
            "Performance_Compensation", "Value_of_Benefits", "KPI_Accuracy", "Career_Growth",
            "Traning_Quality", "Loyalty1", "Loyalty1_Other", "Loyalty2", "Loyalty2_Other"
        ]
        values = [emp_code, first_name, survey_type, submitted_at] + [a.get(c, "") for c in columns[4:]]

        query = f"""
            INSERT INTO {DATABASE_NAME}.{SCHEMA_NAME}.{ANSWER_TABLE}
            ({','.join(columns)})
            VALUES ({','.join([f'${i+1}' for i in range(len(values))])})
        """
        session.sql(query, values).collect()
        st.success("‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞–¥–≥–∞–ª–ª–∞–∞!")
    except Exception as e:
        st.error(f"‚ùå –•–∞–¥–≥–∞–ª–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {e}")

# ---- Main Routing ----
if not st.session_state.logged_in:
    login_page()
elif st.session_state.page == -0.5:
    directory_page()
elif st.session_state.page == 0:
    page_0()
elif st.session_state.page == 1:
    page_1()
elif st.session_state.page == 2:
    page_2()
elif 3 <= st.session_state.page <= 22:
    render_survey()
else:
    st.error("üö® Invalid page number.")



























